type Query {
    # Shows info about the API server
    info: ServerInfo!, #done

    # Lists all commands
    commands: [Command!], #done

    # Gets a guild by its ID, returns NULL if bot isn't in the guild
    guild(id: String!): Guild,
    
    # Gets user by his ID, returns NULL if bot doesn't see the user
    user(id: String!): User,

    # Gets command by its name, returns NULL if command doesn't exist
    command(name: String!): Command #done
}

type ServerInfo {
    version: Semver!,
    contributors: [Contributor!], # not yet implemented
    repository: String!,
    status: BotStatus!,

    contributor(nickname: String): Contributor, # not yet implemented
}

type Contributor {
    avatar: String!,
    nickname: String!,
    name: String
}

type Semver {
    string: String!,
    major: Int!,
    minor: Int!,
    patch: Int!,
    channel: UpdateChannel!
}

type User {
    id: String!,
    nickname: String!,
    bot: Boolean!,
    tag: String!,
    guilds: [Guild!]!, # max 100

    guild(id: String!): Guild
}

type Channel {
    id: String!,
    position: Int,
    guild: Guild,
    type: ChannelType!,

    #messages: [Message!],
    message(id: String!): Message,
}

type Guild {
    id: String!,
    icon: String,
    owner: User!,
    channels: [Channel!]!,
    userLength: Int!,
    settings: GuildSettings,
    acronym: String,
    splash: String,
    name: String,
    banner: String,
    description: String,
    emojis: [Emoji!]!,
    created: String!,

    channel(id: String!): Channel,
    user(id: String!): User
}

type Emoji {
    id: String!
}

type GuildSettings {
    allowedChannels: [Channel!],
    cases: [Case!]!,
    disabledCommands: [Command!]!,
}

type Command {
    name: String!,
    group: String!,
    description: String!,
    aliases: [String!]!,
    usage: String,

    arguments: [Argument!]!
}

type Argument {
    type: String!,
    prompt: String!,
    default: String,
    key: String!,
    infinite: Boolean!
}

type Case {
    mod: SimpleUser!,
    user: SimpleUser!,
    reason: String!,
    deleted: Boolean!,
}

type SimpleUser {
    user: User,
    id: Int!,
    name: String!
}

type Message {
    id: String!,
    author: User,
    webhook: Boolean!,
    channel: Channel!,
    guild: Guild,
    content: String!,
    reactions: [String!],
    embeds: [Embed!],
}

type Embed {
    message: Message,
    author: User,
    channel: Channel,

    title: String,
    description: String,
    embedAuthor: EmbedAuthor,
    fields: [EmbedField!]!,
    footer: String,
    thumbnail: String,
    image: String
}

type EmbedField {
    title: String!,
    content: String!,
    inline: Boolean!,
}

type EmbedAuthor {
    link: String,
    name: String,
    avatar: String
}


enum ChannelType {
    DM,
    Text,
    Voice,
    Video,
    News
}

enum BotStatus {
    offline,
    running,
    updating
}

enum UpdateChannel {
    alpha,
    beta,
    release
}

schema {
    query: Query
}
